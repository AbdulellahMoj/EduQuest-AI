{
    "courseCode": "CS101",
    "courseTitle": "Introduction to Java Programming",
    "units": [
        {
            "unitId": 1,
            "unitText": "Abstract Classes and Methods",
            "levels": [
                {
                    "levelId": 1,
                    "questions": [
                        {
                            "questionId": 1,
                            "questionType": "MCQ",
                            "questionText": "Which keyword is used to declare an abstract class in Java?",
                            "choices": [
                                "abstract",
                                "class",
                                "extends",
                                "implements"
                            ],
                            "answer": "abstract",
                            "explanation": "The keyword 'abstract' is used to declare an abstract class in Java.",
                            "hint": "It's a special keyword specific to abstract classes.",
                            "mascot": "Remember the keyword that signifies something is not complete yet."
                        },
                        {
                            "questionId": 2,
                            "questionType": "TRUE/FALSE",
                            "questionText": "An abstract class can be instantiated using the new operator.",
                            "choices": [
                                "TRUE",
                                "FALSE"
                            ],
                            "answer": "FALSE",
                            "explanation": "An abstract class cannot be instantiated using the new operator.",
                            "hint": "Think about what makes an abstract class 'abstract'.",
                            "mascot": "Abstract classes are like blueprints; you can't build a house from a blueprint alone."
                        },
                        {
                            "questionId": 3,
                            "questionType": "FILL IN THE BLANK",
                            "questionText": "A method without a body is called an _______ method.",
                            "choices": [
                                "abstract",
                                "void",
                                "static",
                                "final"
                            ],
                            "answer": "abstract",
                            "explanation": "A method without a body is declared using the 'abstract' keyword and is called an abstract method.",
                            "hint": "It's the same keyword used for abstract classes.",
                            "mascot": "Abstract methods are like plans; they don't have the implementation details."
                        },
                        {
                            "questionId": 4,
                            "questionType": "MCQ",
                            "questionText": "Which of the following is a reason to use an abstract class?",
                            "choices": [
                                "To create an instance of the class",
                                "To prevent instantiation and provide a common interface for subclasses",
                                "To declare final methods",
                                "To implement interface methods"
                            ],
                            "answer": "To prevent instantiation and provide a common interface for subclasses",
                            "explanation": "Abstract classes are used to provide a common interface for subclasses and prevent instantiation.",
                            "hint": "Think about why you wouldn't want to instantiate the class directly.",
                            "mascot": "Abstract classes set the rules for their subclasses."
                        },
                        {
                            "questionId": 5,
                            "questionType": "TRUE/FALSE",
                            "questionText": "A concrete class that extends an abstract class must implement all abstract methods of the superclass.",
                            "choices": [
                                "TRUE",
                                "FALSE"
                            ],
                            "answer": "TRUE",
                            "explanation": "A concrete class must implement all abstract methods of its abstract superclass to be instantiated.",
                            "hint": "Consider what makes a class 'concrete' and complete.",
                            "mascot": "Concrete classes must fill in the blanks left by abstract classes."
                        },
                        {
                            "questionId": 6,
                            "questionType": "FILL IN THE BLANK",
                            "questionText": "In Java, _______ is an example of an abstract method.",
                            "choices": [
                                "public abstract void draw(int size);",
                                "public void setColor(int c);",
                                "public int getArea();",
                                "public static void main(String[] args);"
                            ],
                            "answer": "public abstract void draw(int size);",
                            "explanation": "The method 'public abstract void draw(int size);' is an abstract method because it has no body.",
                            "hint": "Look for the method that lacks a body.",
                            "mascot": "Abstract methods declare what needs to be done, not how."
                        }
                    ]
                },
                {
                    "levelId": 2,
                    "questions": [
                        {
                            "questionId": 7,
                            "questionType": "MCQ",
                            "questionText": "Can an abstract class contain non-abstract methods?",
                            "choices": [
                                "Yes",
                                "No",
                                "Only if all subclasses are abstract",
                                "Only if they override superclass methods"
                            ],
                            "answer": "Yes",
                            "explanation": "An abstract class can contain both abstract and non-abstract methods.",
                            "hint": "Think about what an abstract class can define in addition to abstract methods.",
                            "mascot": "Abstract classes can have concrete methods too."
                        },
                        {
                            "questionId": 8,
                            "questionType": "TRUE/FALSE",
                            "questionText": "All methods in an abstract class must be abstract.",
                            "choices": [
                                "TRUE",
                                "FALSE"
                            ],
                            "answer": "FALSE",
                            "explanation": "An abstract class can have both abstract and concrete methods.",
                            "hint": "Remember that abstract classes can provide common functionality.",
                            "mascot": "Not all methods in an abstract class are abstract."
                        },
                        {
                            "questionId": 9,
                            "questionType": "FILL IN THE BLANK",
                            "questionText": "A subclass of an abstract class that does not implement all abstract methods must also be _______.",
                            "choices": [
                                "abstract",
                                "final",
                                "static",
                                "concrete"
                            ],
                            "answer": "abstract",
                            "explanation": "A subclass that does not implement all abstract methods of its abstract superclass must itself be abstract.",
                            "hint": "Consider what it means for a class to be incomplete.",
                            "mascot": "Incomplete subclasses must also be abstract."
                        },
                        {
                            "questionId": 10,
                            "questionType": "MCQ",
                            "questionText": "Why might a subclass override a method from its superclass and declare it abstract?",
                            "choices": [
                                "To ensure all subclasses implement the method",
                                "To prevent the superclass method from being used",
                                "To provide a default implementation",
                                "To declare a static method"
                            ],
                            "answer": "To ensure all subclasses implement the method",
                            "explanation": "A subclass might override a method from its superclass and declare it abstract to ensure all subclasses provide their own implementation.",
                            "hint": "Think about enforcing rules for subclasses.",
                            "mascot": "Abstract methods enforce implementation in all subclasses."
                        },
                        {
                            "questionId": 11,
                            "questionType": "TRUE/FALSE",
                            "questionText": "You can create an array of an abstract class type.",
                            "choices": [
                                "TRUE",
                                "FALSE"
                            ],
                            "answer": "TRUE",
                            "explanation": "An abstract class can be used as a data type, so you can create an array of an abstract class type.",
                            "hint": "Consider abstract classes as data types.",
                            "mascot": "Abstract class arrays hold objects of subclasses."
                        },
                        {
                            "questionId": 12,
                            "questionType": "FILL IN THE BLANK",
                            "questionText": "An abstract method is declared using the _______ keyword.",
                            "choices": [
                                "abstract",
                                "void",
                                "static",
                                "final"
                            ],
                            "answer": "abstract",
                            "explanation": "The 'abstract' keyword is used to declare an abstract method.",
                            "hint": "It's the same keyword used for abstract classes.",
                            "mascot": "Abstract methods and classes share the same keyword."
                        }
                    ]
                },
                {
                    "levelId": 3,
                    "questions": [
                        {
                            "questionId": 13,
                            "questionType": "MCQ",
                            "questionText": "What is a key characteristic of an abstract class?",
                            "choices": [
                                "It can be instantiated",
                                "It provides a common base class for subclasses",
                                "It cannot contain any methods",
                                "It must contain only static methods"
                            ],
                            "answer": "It provides a common base class for subclasses",
                            "explanation": "An abstract class provides a common base class for its subclasses.",
                            "hint": "Think about the role of an abstract class in inheritance.",
                            "mascot": "Abstract classes serve as templates for subclasses."
                        },
                        {
                            "questionId": 14,
                            "questionType": "TRUE/FALSE",
                            "questionText": "A class must be declared abstract if it contains at least one abstract method.",
                            "choices": [
                                "TRUE",
                                "FALSE"
                            ],
                            "answer": "TRUE",
                            "explanation": "If a class contains at least one abstract method, it must be declared abstract.",
                            "hint": "Consider what makes a class incomplete.",
                            "mascot": "Classes with abstract methods must be abstract."
                        },
                        {
                            "questionId": 15,
                            "questionType": "FILL IN THE BLANK",
                            "questionText": "The purpose of an abstract class is to provide a _______ for its subclasses.",
                            "choices": [
                                "template",
                                "constructor",
                                "static method",
                                "private field"
                            ],
                            "answer": "template",
                            "explanation": "An abstract class serves as a template for its subclasses.",
                            "hint": "Abstract classes guide the structure of their subclasses.",
                        

    "mascot": "Abstract classes are like blueprints."
                        },
                        {
                            "questionId": 16,
                            "questionType": "MCQ",
                            "questionText": "Which of the following is true about abstract methods?",
                            "choices": [
                                "They have a body",
                                "They cannot be declared in abstract classes",
                                "They must be implemented by subclasses",
                                "They can be declared in non-abstract classes"
                            ],
                            "answer": "They must be implemented by subclasses",
                            "explanation": "Abstract methods must be implemented by any non-abstract subclass.",
                            "hint": "Think about the requirements placed on subclasses.",
                            "mascot": "Subclasses must complete abstract methods."
                        },
                        {
                            "questionId": 17,
                            "questionType": "TRUE/FALSE",
                            "questionText": "Abstract classes can have constructors.",
                            "choices": [
                                "TRUE",
                                "FALSE"
                            ],
                            "answer": "TRUE",
                            "explanation": "Abstract classes can have constructors, which are called when a subclass is instantiated.",
                            "hint": "Consider how an abstract class initializes its fields.",
                            "mascot": "Abstract classes can prepare their subclasses through constructors."
                        },
                        {
                            "questionId": 18,
                            "questionType": "FILL IN THE BLANK",
                            "questionText": "An abstract class cannot be _______ directly.",
                            "choices": [
                                "instantiated",
                                "extended",
                                "inherited",
                                "overloaded"
                            ],
                            "answer": "instantiated",
                            "explanation": "An abstract class cannot be instantiated directly using the new operator.",
                            "hint": "Think about what makes an abstract class different from a concrete class.",
                            "mascot": "Abstract classes can't create objects directly."
                        }
                    ]
                }
            ]
        }
    ]
}